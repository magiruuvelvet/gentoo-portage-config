diff --git a/src/core/copyjob.cpp b/src/core/copyjob.cpp
index 8643efc..834dbae 100644
--- a/src/core/copyjob.cpp
+++ b/src/core/copyjob.cpp
@@ -913,14 +913,6 @@ void CopyJobPrivate::addCopyInfoFromUDSEntry(const UDSEntry &entry, const QUrl &
 QUrl CopyJobPrivate::finalDestUrl(const QUrl &src, const QUrl &dest) const
 {
     Q_Q(const CopyJob);
-    if (dest.scheme() == QLatin1String("trash")) {
-        const QMap<QString, QString> &metaData = q->metaData();
-        QMap<QString, QString>::ConstIterator it = metaData.find(QLatin1String("trashURL-") + src.path());
-        if (it != metaData.constEnd()) {
-            qCDebug(KIO_COPYJOB_DEBUG) << "finalDestUrl=" << it.value();
-            return QUrl(it.value());
-        }
-    }
     return dest;
 }
 
@@ -1886,10 +1878,6 @@ KIO::Job *CopyJobPrivate::linkNextFile(const QUrl &uSource, const QUrl &uDest, J
                     config.writeEntry("Icon", QStringLiteral("text-x-texinfo"));
                 } else if (protocol == QLatin1String("mailto")) { // sven:
                     config.writeEntry("Icon", QStringLiteral("internet-mail")); // added mailto: support
-                } else if (protocol == QLatin1String("trash") && url.path().length() <= 1) { // trash:/ link
-                    config.writeEntry("Name", i18n("Trash"));
-                    config.writeEntry("Icon", QStringLiteral("user-trash-full"));
-                    config.writeEntry("EmptyIcon", QStringLiteral("user-trash"));
                 } else {
                     config.writeEntry("Icon", QStringLiteral("unknown"));
                 }
diff --git a/src/core/global.cpp b/src/core/global.cpp
index d4493b1..9c16108 100644
--- a/src/core/global.cpp
+++ b/src/core/global.cpp
@@ -238,16 +238,6 @@ QString KIO::iconNameForUrl(const QUrl &url)
             iconName = favIconForUrl(url);
         }
 
-        // Then handle the trash
-        else if (url.scheme() == QLatin1String("trash")) {
-            if (url.path().length() <= 1) { // trash:/ itself
-                KConfig trashConfig(QStringLiteral("trashrc"), KConfig::SimpleConfig);
-                iconName = trashConfig.group("Status").readEntry("Empty", true) ? QStringLiteral("user-trash") : QStringLiteral("user-trash-full");
-            } else { // url.path().length() > 1, it's a file/folder under trash:/
-                iconName = mt.iconName();
-            }
-        }
-
         // and other protocols
         if (iconName.isEmpty() && (mt.isDefault() || url.path().size() <= 1)) {
             iconName = KProtocolInfo::icon(url.scheme());
diff --git a/src/core/kfileitem.cpp b/src/core/kfileitem.cpp
index 8e6b125..d4ba162 100644
--- a/src/core/kfileitem.cpp
+++ b/src/core/kfileitem.cpp
@@ -1012,14 +1012,6 @@ static QString iconFromDesktopFile(const QString &path)
         if (!emptyIcon.isEmpty()) {
             const QString u = cfg.readUrl();
             const QUrl url(u);
-            if (url.scheme() == QLatin1String("trash")) {
-                // We need to find if the trash is empty, preferably without using a KIO job.
-                // So instead kio_trash leaves an entry in its config file for us.
-                KConfig trashConfig(QStringLiteral("trashrc"), KConfig::SimpleConfig);
-                if (trashConfig.group("Status").readEntry("Empty", true)) {
-                    return emptyIcon;
-                }
-            }
         }
     }
     return icon;
