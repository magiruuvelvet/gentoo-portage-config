From 00b1f21b0fe8164c4bcda9109e08bf7a69c0ce24 Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Wed, 14 Dec 2022 12:22:02 +0100
Subject: [PATCH] plugins/gpu: Use pci address to identify nvidia gpus

The DRM index does not correspond to the nvidia index. Identify
cards by their pci addresses and derive the index from the position
in the query.
BUG:463033
BUG:461361
FIXED-IN:5.27
---
 plugins/gpu/LinuxBackend.cpp              |  2 +-
 plugins/gpu/LinuxNvidiaGpu.cpp            | 32 ++++++++++++++---------
 plugins/gpu/LinuxNvidiaGpu.h              |  7 +++--
 plugins/gpu/NvidiaSmiProcess.cpp          |  2 ++
 plugins/gpu/NvidiaSmiProcess.h            |  1 +
 plugins/network/NetworkManagerBackend.cpp |  2 +-
 6 files changed, 29 insertions(+), 17 deletions(-)

diff --git a/plugins/gpu/LinuxBackend.cpp b/plugins/gpu/LinuxBackend.cpp
index 3899ab2..de8d758 100644
--- a/plugins/gpu/LinuxBackend.cpp
+++ b/plugins/gpu/LinuxBackend.cpp
@@ -58,7 +58,7 @@ void LinuxBackend::start()
         if (vendor == amdVendor) {
             gpu = new LinuxAmdGpu{gpuId, gpuName, pciDevice};
         } else if (vendor == nvidiaVendor) {
-            gpu = new LinuxNvidiaGpu{drmNumber, gpuId, gpuName};
+            gpu = new LinuxNvidiaGpu{gpuId, gpuName, pciDevice};
         } else {
             qDebug() << "Found unsupported GPU:" << path;
             udev_device_unref(drmDevice);
diff --git a/plugins/gpu/LinuxNvidiaGpu.cpp b/plugins/gpu/LinuxNvidiaGpu.cpp
index 72bc0a6..3cd49a4 100644
--- a/plugins/gpu/LinuxNvidiaGpu.cpp
+++ b/plugins/gpu/LinuxNvidiaGpu.cpp
@@ -6,12 +6,13 @@
 
 #include "LinuxNvidiaGpu.h"
 
+#include <libudev.h>
 
 NvidiaSmiProcess *LinuxNvidiaGpu::s_smiProcess = nullptr;
 
-LinuxNvidiaGpu::LinuxNvidiaGpu(int index, const QString& id, const QString& name)
+LinuxNvidiaGpu::LinuxNvidiaGpu(const QString &id, const QString &name, udev_device *device)
     : GpuDevice(id, name)
-    , m_index(index)
+    , m_device(device)
 {
     if (!s_smiProcess) {
         s_smiProcess = new NvidiaSmiProcess();
@@ -43,17 +44,21 @@ void LinuxNvidiaGpu::initialize()
         });
     }
 
-    auto queryResult = s_smiProcess->query();
-    if (m_index >= int(queryResult.size())) {
-        qWarning() << "Could not retrieve information for NVidia GPU" << m_index;
+    const auto queryResult = s_smiProcess->query();
+    const auto sysName = QString::fromLocal8Bit(udev_device_get_sysname(m_device));
+    auto it = std::find_if(queryResult.cbegin(), queryResult.cend(), [&sysName] (const NvidiaSmiProcess::GpuQueryResult &result) {
+        return result.pciPath == sysName;
+    });
+    if (it == queryResult.cend()) {
+        qWarning() << "Could not retrieve information for NVidia GPU" << sysName;
     } else {
-        auto data = queryResult.at(m_index);
-        m_nameProperty->setValue(data.name);
-        m_totalVramProperty->setValue(data.totalMemory);
-        m_usedVramProperty->setMax(data.totalMemory);
-        m_coreFrequencyProperty->setMax(data.maxCoreFrequency);
-        m_memoryFrequencyProperty->setMax(data.maxMemoryFrequency);
-        m_temperatureProperty->setMax(data.maxTemperature);
+        m_index = it - queryResult.cbegin();
+        m_nameProperty->setValue(it->name);
+        m_totalVramProperty->setValue(it->totalMemory);
+        m_usedVramProperty->setMax(it->totalMemory);
+        m_coreFrequencyProperty->setMax(it->maxCoreFrequency);
+        m_memoryFrequencyProperty->setMax(it->maxMemoryFrequency);
+        m_temperatureProperty->setMax(it->maxTemperature);
     }
 
     m_usedVramProperty->setUnit(KSysGuard::UnitMegaByte);
diff --git a/plugins/gpu/LinuxNvidiaGpu.h b/plugins/gpu/LinuxNvidiaGpu.h
index 4d740ea..a5be109 100644
--- a/plugins/gpu/LinuxNvidiaGpu.h
+++ b/plugins/gpu/LinuxNvidiaGpu.h
@@ -11,12 +11,14 @@
 #include "GpuDevice.h"
 #include "NvidiaSmiProcess.h"
 
+struct udev_device;
+
 class LinuxNvidiaGpu : public GpuDevice
 {
     Q_OBJECT
 
 public:
-    LinuxNvidiaGpu(int index, const QString& id, const QString& name);
+    LinuxNvidiaGpu(const QString& id, const QString &name, udev_device *device);
     ~LinuxNvidiaGpu() override;
 
     void initialize() override;
@@ -24,7 +26,8 @@ public:
 private:
     void onDataReceived(const NvidiaSmiProcess::GpuData &data);
 
-    int m_index = 0;
+    int m_index = -1;
+    udev_device *m_device;
 
     static NvidiaSmiProcess *s_smiProcess;
 };
diff --git a/plugins/gpu/NvidiaSmiProcess.cpp b/plugins/gpu/NvidiaSmiProcess.cpp
index 2c261c5..f87ddfa 100644
--- a/plugins/gpu/NvidiaSmiProcess.cpp
+++ b/plugins/gpu/NvidiaSmiProcess.cpp
@@ -55,6 +55,8 @@ std::vector<NvidiaSmiProcess::GpuQueryResult> NvidiaSmiProcess::query()
             // Start of GPU properties block. Ensure we have a new data object
             // to write to.
             data = m_queryResult.emplace(m_queryResult.end());
+            // nvidia-smi has to much zeros compared to linux, remove line break
+            data->pciPath = line.mid(strlen("GPU 0000")).chopped(1);
             gpuCounter++;
         }
 
diff --git a/plugins/gpu/NvidiaSmiProcess.h b/plugins/gpu/NvidiaSmiProcess.h
index 22636bc..e33f468 100644
--- a/plugins/gpu/NvidiaSmiProcess.h
+++ b/plugins/gpu/NvidiaSmiProcess.h
@@ -26,6 +26,7 @@ public:
     };
 
     struct GpuQueryResult {
+        QString pciPath;
         QString name;
         uint totalMemory = 0;
         uint maxCoreFrequency = 0;
diff --git a/plugins/network/NetworkManagerBackend.cpp b/plugins/network/NetworkManagerBackend.cpp
index cf24c66..7dcc856 100644
--- a/plugins/network/NetworkManagerBackend.cpp
+++ b/plugins/network/NetworkManagerBackend.cpp
@@ -154,7 +154,7 @@ void NetworkManagerDevice::update()
     setName(m_device->activeConnection()->connection()->name());
     m_networkSensor->setValue(name());
 
-    auto dnsAccumulationFunction = [](QString &a, const QHostAddress& b) { return std::move(a).append(", ").append(b.toString()); };
+    auto dnsAccumulationFunction = [](QString &&a, const QHostAddress& b) { return std::move(a).append(", ").append(b.toString()); };
     if (m_device->ipV4Config().isValid()) {
         auto ipv4 = m_device->ipV4Config().addresses().at(0).ip().toString();
         m_ipv4Sensor->setValue(ipv4);
