diff --git a/src/blogger/bloggerservice.cpp b/src/blogger/bloggerservice.cpp
index 15708e4..8997e77 100644
--- a/src/blogger/bloggerservice.cpp
+++ b/src/blogger/bloggerservice.cpp
@@ -19,7 +19,7 @@ namespace BloggerService
 {
 namespace Private
 {
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
+static const QUrl GoogleApisUrl;
 
 auto commentBasePath(const QString &blogId, const QString &postId = QString(), const QString &commentId = QString()) -> QString
 {
diff --git a/src/calendar/calendarservice.cpp b/src/calendar/calendarservice.cpp
index 7a4ad0c..2b62428 100644
--- a/src/calendar/calendarservice.cpp
+++ b/src/calendar/calendarservice.cpp
@@ -59,9 +59,9 @@ ObjectPtr JSONToEvent(const QVariantMap &data, const QString &timezone = QString
  */
 QString checkAndConverCDOTZID(const QString &tzid, const EventPtr &event);
 
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-static const QString CalendarListBasePath(QStringLiteral("/calendar/v3/users/me/calendarList"));
-static const QString CalendarBasePath(QStringLiteral("/calendar/v3/calendars"));
+static const QUrl GoogleApisUrl;
+static const QString CalendarListBasePath;
+static const QString CalendarBasePath;
 }
 
 QNetworkRequest prepareRequest(const QUrl &url)
@@ -76,51 +76,37 @@ QNetworkRequest prepareRequest(const QUrl &url)
 
 QUrl fetchCalendarsUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarListBasePath);
-    return url;
+    return {};
 }
 
 QUrl fetchCalendarUrl(const QString &calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarListBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl updateCalendarUrl(const QString &calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl createCalendarUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath);
-    return url;
+    return {};
 }
 
 QUrl removeCalendarUrl(const QString &calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID);
-    return url;
+    return {};
 }
 
 QUrl fetchEventsUrl(const QString &calendarID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events"));
-    return url;
+    return {};
 }
 
 QUrl fetchEventUrl(const QString &calendarID, const QString &eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    return url;
+    return {};
 }
 
 namespace
@@ -145,56 +131,32 @@ static const QString destinationQueryParam = QStringLiteral("destination");
 
 QUrl updateEventUrl(const QString &calendarID, const QString &eventID, SendUpdatesPolicy updatePolicy)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    QUrlQuery query(url);
-    query.addQueryItem(sendUpatesQueryParam, sendUpdatesPolicyToString(updatePolicy));
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl createEventUrl(const QString &calendarID, SendUpdatesPolicy updatePolicy)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events"));
-    QUrlQuery query(url);
-    query.addQueryItem(sendUpatesQueryParam, sendUpdatesPolicyToString(updatePolicy));
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl importEventUrl(const QString &calendarID, SendUpdatesPolicy updatePolicy)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events") % QLatin1String("/import"));
-    QUrlQuery query(url);
-    query.addQueryItem(sendUpatesQueryParam, sendUpdatesPolicyToString(updatePolicy));
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl removeEventUrl(const QString &calendarID, const QString &eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % calendarID % QLatin1String("/events/") % eventID);
-    return url;
+    return {};
 }
 
 QUrl moveEventUrl(const QString &sourceCalendar, const QString &destCalendar, const QString &eventID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::CalendarBasePath % QLatin1Char('/') % sourceCalendar % QLatin1String("/events/") % eventID % QLatin1String("/move"));
-    QUrlQuery query(url);
-    query.addQueryItem(destinationQueryParam, destCalendar);
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl freeBusyQueryUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(QStringLiteral("/calendar/v3/freeBusy"));
-    return url;
+    return {};
 }
 
 namespace
@@ -390,7 +352,6 @@ EventPtr JSONToEvent(const QByteArray &jsonData)
     QJsonParseError error;
     QJsonDocument document = QJsonDocument::fromJson(jsonData, &error);
     if (error.error != QJsonParseError::NoError) {
-        qCWarning(KGAPIDebug) << "Error parsing event JSON: " << error.errorString();
     }
     QVariantMap data = document.toVariant().toMap();
     if (data.value(kindParam).toString() != eventKind) {
diff --git a/src/calendar/event.cpp b/src/calendar/event.cpp
index 8e10520..01072bd 100644
--- a/src/calendar/event.cpp
+++ b/src/calendar/event.cpp
@@ -57,11 +57,9 @@ bool Event::operator==(const Event &other) const
         return false;
     }
     if (d->deleted != other.d->deleted) {
-        qCDebug(KGAPIDebug) << "Deleted does not match";
         return false;
     }
     if (d->useDefaultReminders != other.d->useDefaultReminders) {
-        qCDebug(KGAPIDebug) << "UseDefaultReminders does not match";
         return false;
     }
 
diff --git a/src/core/accountinfo/accountinfofetchjob.cpp b/src/core/accountinfo/accountinfofetchjob.cpp
index 04c9edb..939e43d 100644
--- a/src/core/accountinfo/accountinfofetchjob.cpp
+++ b/src/core/accountinfo/accountinfofetchjob.cpp
@@ -34,34 +34,11 @@ AccountInfoFetchJob::~AccountInfoFetchJob()
 
 void AccountInfoFetchJob::start()
 {
-    const QUrl url = QUrl(QStringLiteral("https://www.googleapis.com/oauth2/v1/userinfo"));
-    QNetworkRequest request(url);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : std::as_const(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
 }
 
 ObjectsList AccountInfoFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray &rawData)
 {
-    ObjectsList items;
-
-    const QString contentType = reply->header(QNetworkRequest::ContentTypeHeader).toString();
-    ContentType ct = Utils::stringToContentType(contentType);
-    if (ct == KGAPI2::JSON) {
-        items << AccountInfo::fromJSON(rawData);
-    } else {
-        setError(KGAPI2::InvalidResponse);
-        setErrorString(tr("Invalid response content type"));
-        emitFinished();
-    }
-
-    return items;
+    return {};
 }
 
 #include "moc_accountinfofetchjob.cpp"
diff --git a/src/core/authjob.cpp b/src/core/authjob.cpp
index 8206b75..96ed193 100644
--- a/src/core/authjob.cpp
+++ b/src/core/authjob.cpp
@@ -90,26 +90,4 @@ void AuthJob::dispatchRequest(QNetworkAccessManager * /*accessManager*/,
 
 void AuthJob::start()
 {
-    if (d->account->refreshToken().isEmpty() || (d->account->m_scopesChanged == true)) {
-        d->account->addScope(Account::accountInfoEmailScopeUrl());
-
-        auto job = new FullAuthenticationJob(d->account, d->apiKey, d->secretKey, this);
-        job->setUsername(d->username);
-        job->setServerPort(kgapiTcpAuthServerPort);
-        connect(job, &Job::finished, this, [this](Job *job) {
-            d->jobFinished<FullAuthenticationJob>(job);
-        });
-    } else {
-        if (d->account->accountName().isEmpty()) {
-            setError(KGAPI2::InvalidAccount);
-            setErrorString(tr("Account name is empty"));
-            emitFinished();
-            return;
-        }
-
-        auto job = new RefreshTokensJob(d->account, d->apiKey, d->secretKey, this);
-        connect(job, &Job::finished, this, [this](Job *job) {
-            d->jobFinished<RefreshTokensJob>(job);
-        });
-    }
 }
diff --git a/src/core/job.cpp b/src/core/job.cpp
index 1d15a89..09a05cb 100644
--- a/src/core/job.cpp
+++ b/src/core/job.cpp
@@ -52,34 +52,10 @@ FileLogger *FileLogger::self()
 
 void FileLogger::logRequest(const QNetworkRequest &request, const QByteArray &rawData)
 {
-    if (!mFile) {
-        return;
-    }
-
-    QTextStream stream(mFile.data());
-    stream << "C: " << request.url().toDisplayString() << "\n";
-    const auto headers = request.rawHeaderList();
-    for (const auto &header : headers) {
-        stream << "   " << header << ": " << request.rawHeader(header) << "\n";
-    }
-    stream << "   " << rawData << "\n\n";
-    mFile->flush();
 }
 
 void FileLogger::logReply(const QNetworkReply *reply, const QByteArray &rawData)
 {
-    if (!mFile) {
-        return;
-    }
-
-    QTextStream stream(mFile.data());
-    stream << "S: " << reply->url().toDisplayString() << "\n";
-    const auto headers = reply->rawHeaderList();
-    for (const auto &header : headers) {
-        stream << "   " << header << ": " << reply->rawHeader(header) << "\n";
-    }
-    stream << "   " << rawData << "\n\n";
-    mFile->flush();
 }
 
 Job::Private::Private(Job *parent)
diff --git a/src/core/private/newtokensfetchjob.cpp b/src/core/private/newtokensfetchjob.cpp
index a5ddc04..a173f49 100644
--- a/src/core/private/newtokensfetchjob.cpp
+++ b/src/core/private/newtokensfetchjob.cpp
@@ -77,20 +77,6 @@ qulonglong NewTokensFetchJob::expiresIn() const
 
 void NewTokensFetchJob::start()
 {
-    QNetworkRequest request;
-
-    request.setUrl(QUrl(QStringLiteral("https://accounts.google.com/o/oauth2/token")));
-    request.setHeader(QNetworkRequest::ContentTypeHeader, QLatin1String("application/x-www-form-urlencoded"));
-
-    QUrlQuery params;
-    params.addQueryItem(QStringLiteral("client_id"), d->apiKey);
-    params.addQueryItem(QStringLiteral("client_secret"), d->secretKey);
-    params.addQueryItem(QStringLiteral("code"), d->tmpToken);
-    params.addQueryItem(QStringLiteral("redirect_uri"),
-                        QStringLiteral("http://127.0.0.1:%1").arg(d->localPort)); // we need to use the same URL as in AuthWidget
-    params.addQueryItem(QStringLiteral("grant_type"), QStringLiteral("authorization_code"));
-
-    enqueueRequest(request, params.toString(QUrl::FullyEncoded).toLatin1());
 }
 
 void NewTokensFetchJob::dispatchRequest(QNetworkAccessManager *accessManager,
@@ -105,21 +91,4 @@ void NewTokensFetchJob::dispatchRequest(QNetworkAccessManager *accessManager,
 
 void NewTokensFetchJob::handleReply(const QNetworkReply *reply, const QByteArray &rawData)
 {
-    Q_UNUSED(reply)
-
-    QJsonDocument document = QJsonDocument::fromJson(rawData);
-    if (document.isNull()) {
-        qCWarning(KGAPIDebug) << "Failed to parse server response.";
-        qCDebug(KGAPIDebug) << rawData;
-        setError(KGAPI2::AuthCancelled);
-        setErrorString(tr("Failed to parse server response."));
-        return;
-    }
-    QVariantMap parsed_data = document.toVariant().toMap();
-
-    qCDebug(KGAPIDebug) << "Retrieved new tokens pair.";
-
-    d->accessToken = parsed_data.value(QStringLiteral("access_token")).toString();
-    d->refreshToken = parsed_data.value(QStringLiteral("refresh_token")).toString();
-    d->expiresIn = parsed_data.value(QStringLiteral("expires_in")).toULongLong();
 }
diff --git a/src/drive/driveservice.cpp b/src/drive/driveservice.cpp
index f96ba42..ab9aedd 100644
--- a/src/drive/driveservice.cpp
+++ b/src/drive/driveservice.cpp
@@ -16,12 +16,12 @@ namespace KGAPI2
 
 namespace Private
 {
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-static const QString AppsBasePath(QStringLiteral("/drive/v2/about"));
-static const QString FilesBasePath(QStringLiteral("/drive/v2/files"));
-static const QString ChangeBasePath(QStringLiteral("/drive/v2/changes"));
-static const QString DrivesBasePath(QStringLiteral("/drive/v2/drives"));
-static const QString TeamdriveBasePath(QStringLiteral("/drive/v2/teamdrives"));
+static const QUrl GoogleApisUrl;
+static const QString AppsBasePath;
+static const QString FilesBasePath;
+static const QString ChangeBasePath;
+static const QString DrivesBasePath;
+static const QString TeamdriveBasePath;
 }
 
 namespace DriveService
diff --git a/src/latitude/latitudeservice.cpp b/src/latitude/latitudeservice.cpp
index b806b07..84876c3 100644
--- a/src/latitude/latitudeservice.cpp
+++ b/src/latitude/latitudeservice.cpp
@@ -22,9 +22,9 @@ namespace Private
 {
 LocationPtr parseLocation(const QVariantMap &map);
 
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-static const QString LocationBasePath(QStringLiteral("/latitude/v1/location"));
-static const QString CurrentLocationBasePath(QStringLiteral("/latitude/v1/currentLocation"));
+static const QUrl GoogleApisUrl;
+static const QString LocationBasePath;
+static const QString CurrentLocationBasePath;
 }
 
 LocationPtr JSONToLocation(const QByteArray &jsonData)
diff --git a/src/latitude/locationcreatejob.cpp b/src/latitude/locationcreatejob.cpp
index 73d0bee..39c1b73 100644
--- a/src/latitude/locationcreatejob.cpp
+++ b/src/latitude/locationcreatejob.cpp
@@ -46,26 +46,6 @@ LocationCreateJob::~LocationCreateJob()
 
 void LocationCreateJob::start()
 {
-    QUrl url;
-    if (d->isCurrent) {
-        url = LatitudeService::insertCurrentLocationUrl();
-    } else {
-        url = LatitudeService::insertLocationUrl();
-    }
-
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    const QByteArray rawData = LatitudeService::locationToJSON(d->location);
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : std::as_const(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request, rawData, QStringLiteral("application/json"));
 }
 
 ObjectsList LocationCreateJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray &rawData)
diff --git a/src/latitude/locationdeletejob.cpp b/src/latitude/locationdeletejob.cpp
index 2814675..fac2cd5 100644
--- a/src/latitude/locationdeletejob.cpp
+++ b/src/latitude/locationdeletejob.cpp
@@ -54,28 +54,4 @@ LocationDeleteJob::~LocationDeleteJob()
 
 void LocationDeleteJob::start()
 {
-    if (d->finished) {
-        emitFinished();
-        return;
-    }
-
-    QUrl url;
-    if (d->locationId > 0) {
-        url = LatitudeService::deleteLocationUrl(d->locationId);
-    } else {
-        url = LatitudeService::deleteCurrentLocationUrl();
-    }
-
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    QStringList headers;
-    const auto rawHeaderList = request.rawHeaderList();
-    headers.reserve(rawHeaderList.size());
-    for (const QByteArray &str : std::as_const(rawHeaderList)) {
-        headers << QLatin1String(str) + QLatin1String(": ") + QLatin1String(request.rawHeader(str));
-    }
-
-    enqueueRequest(request);
-    d->finished = true;
 }
diff --git a/src/latitude/locationfetchhistoryjob.cpp b/src/latitude/locationfetchhistoryjob.cpp
index 48c856e..17a4488 100644
--- a/src/latitude/locationfetchhistoryjob.cpp
+++ b/src/latitude/locationfetchhistoryjob.cpp
@@ -38,10 +38,7 @@ LocationFetchHistoryJob::Private::Private(LocationFetchHistoryJob *parent)
 
 QNetworkRequest LocationFetchHistoryJob::Private::createRequest(const QUrl &url)
 {
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    return request;
+    return QNetworkRequest(QUrl());
 }
 
 LocationFetchHistoryJob::LocationFetchHistoryJob(const AccountPtr &account, QObject *parent)
@@ -109,10 +106,6 @@ void LocationFetchHistoryJob::setMaxTimestamp(qlonglong maxTimestamp)
 
 void LocationFetchHistoryJob::start()
 {
-    const QUrl url = LatitudeService::locationHistoryUrl(d->granularity, d->maxResults, d->maxTimestamp, d->minTimestamp);
-    const QNetworkRequest request = d->createRequest(url);
-
-    enqueueRequest(request);
 }
 
 ObjectsList LocationFetchHistoryJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray &rawData)
@@ -130,8 +123,6 @@ ObjectsList LocationFetchHistoryJob::handleReplyWithItems(const QNetworkReply *r
     }
 
     if (feedData.nextPageUrl.isValid()) {
-        const QNetworkRequest request = d->createRequest(feedData.nextPageUrl);
-        enqueueRequest(request);
     }
 
     return items;
diff --git a/src/latitude/locationfetchjob.cpp b/src/latitude/locationfetchjob.cpp
index 1b051c5..9cd16cc 100644
--- a/src/latitude/locationfetchjob.cpp
+++ b/src/latitude/locationfetchjob.cpp
@@ -70,10 +70,6 @@ void LocationFetchJob::start()
     } else {
         url = LatitudeService::retrieveLocationUrl(d->timestamp, d->granularity);
     }
-    QNetworkRequest request(url);
-    request.setRawHeader("GData-Version", LatitudeService::APIVersion().toLatin1());
-
-    enqueueRequest(request);
 }
 
 ObjectsList LocationFetchJob::handleReplyWithItems(const QNetworkReply *reply, const QByteArray &rawData)
diff --git a/src/people/peopleservice.cpp b/src/people/peopleservice.cpp
index a7317ee..e0d7e9b 100644
--- a/src/people/peopleservice.cpp
+++ b/src/people/peopleservice.cpp
@@ -31,10 +31,10 @@ enum FetchType {
     ContactGroupFetch
 };
 
-static const QUrl GoogleApisUrl(QStringLiteral("https://people.googleapis.com"));
-static const auto PeopleV1Path = QStringLiteral("/v1/");
-static const auto PeopleBasePath = QString(PeopleV1Path % QStringLiteral("people"));
-static const auto ContactGroupsBasePath = QString(PeopleV1Path % QStringLiteral("contactGroups"));
+static const QUrl GoogleApisUrl;
+static const QString PeopleV1Path;
+static const QString PeopleBasePath;
+static const QString ContactGroupsBasePath;
 
 static const auto AllPersonFields = QStringLiteral("addresses,"
                                                    "ageRanges,"
@@ -157,183 +157,74 @@ ObjectPtr JSONToPerson(const QByteArray &jsonData)
 
 QUrl fetchAllContactsUrl(const QString &syncToken)
 {
-    QUrl url(Private::GoogleApisUrl);
-    const QString path = Private::PeopleBasePath % QStringLiteral("/me/connections");
-    url.setPath(path);
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("personFields"), Private::AllPersonFields);
-    query.addQueryItem(QStringLiteral("requestSyncToken"), QStringLiteral("true"));
-
-    if (!syncToken.isEmpty()) {
-        query.addQueryItem(QStringLiteral("syncToken"), syncToken);
-    }
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 // https://developers.google.com/people/api/rest/v1/people/searchContacts
 QUrl fetchContactUrl(const QString &resourceName)
 {
-    QUrl url(Private::GoogleApisUrl);
-    const QString path = Private::PeopleV1Path % resourceName;
-    url.setPath(path);
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("personFields"), Private::AllPersonFields);
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl createContactUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    const QString path = Private::PeopleBasePath % QStringLiteral(":createContact");
-    url.setPath(path);
-    return url;
+    return {};
 }
 
 QUrl updateContactUrl(const QString &resourceName, const QString &personFields)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::PeopleV1Path % resourceName % QStringLiteral(":updateContact"));
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("updatePersonFields"), personFields);
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl deleteContactUrl(const QString &resourceName)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::PeopleV1Path % resourceName % QStringLiteral(":deleteContact"));
-    return url;
+    return {};
 }
 
 QUrl fetchAllContactGroupsUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::ContactGroupsBasePath);
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("groupFields"), Private::AllGroupFields);
-
-    url.setQuery(query);
-
-    return url;
+    return {};
 }
 
 // https://developers.google.com/people/api/rest/v1/contactGroups/get
 QUrl fetchContactGroupUrl(const QString &resourceName)
 {
-    QUrl url(Private::GoogleApisUrl);
-    const QString path = Private::PeopleV1Path % resourceName;
-    url.setPath(path);
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("groupFields"), Private::AllGroupFields);
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl createContactGroupUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::ContactGroupsBasePath);
-    return url;
+    return {};
 }
 
 QUrl updateContactGroupUrl(const QString &resourceName)
 {
-    QUrl url(Private::GoogleApisUrl);
-    const QString path = Private::PeopleV1Path % resourceName;
-    url.setPath(path);
-    return url;
+    return {};
 }
 
 QUrl deleteContactGroupUrl(const QString &resourceName, const bool deleteContacts)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::PeopleV1Path % resourceName);
-
-    const auto deleteContactsString = deleteContacts ? QStringLiteral("true") : QStringLiteral("false");
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("deleteContacts"), deleteContactsString);
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 QUrl updateContactPhotoUrl(const QString &resourceName)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::PeopleV1Path % resourceName % QStringLiteral(":updateContactPhoto"));
-    return url;
+    return {};
 }
 
 QUrl deleteContactPhotoUrl(const QString &resourceName, const QString &personFields)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::PeopleV1Path % resourceName % QStringLiteral(":deleteContactPhoto"));
-
-    QUrlQuery query(url);
-    query.addQueryItem(QStringLiteral("personFields"), personFields);
-
-    url.setQuery(query);
-    return url;
+    return {};
 }
 
 ObjectsList parseConnectionsJSONFeed(FeedData &feedData, const QByteArray &jsonFeed, const QString &syncToken)
 {
-    const auto document = QJsonDocument::fromJson(jsonFeed);
-
-    if (!document.isObject()) {
-        return {};
-    }
-
-    ObjectsList output;
-
-    const auto rootObject = document.object();
-    const auto connections = rootObject.value(QStringLiteral("connections")).toArray();
-    for(const auto &connection : connections) {
-        output.append(People::Person::fromJSON(connection.toObject()));
-    }
-
-    feedData.totalResults = rootObject.value(QStringLiteral("totalItems")).toInt();
-
-    Private::writeNextPageDataQuery(Private::PersonFetch, feedData, rootObject, syncToken);
-    feedData.syncToken = rootObject.value(QStringLiteral("nextSyncToken")).toString();
-
-    return output;
+    return {};
 }
 
 ObjectsList parseContactGroupsJSONFeed(FeedData &feedData, const QByteArray &jsonFeed)
 {
-    // qDebug() << jsonFeed;
-    const auto document = QJsonDocument::fromJson(jsonFeed);
-
-    if (!document.isObject()) {
-        return {};
-    }
-
-    ObjectsList output;
-
-    const auto rootObject = document.object();
-    const auto contactGroups = rootObject.value(QStringLiteral("contactGroups")).toArray();
-    for(const auto &contactGroup : contactGroups) {
-        output.append(People::ContactGroup::fromJSON(contactGroup.toObject()));
-    }
-
-    feedData.totalResults = rootObject.value(QStringLiteral("totalItems")).toInt();
-
-    Private::writeNextPageDataQuery(Private::ContactGroupFetch, feedData, rootObject);
-
-    return output;
+    return {};
 }
 
 }
diff --git a/src/tasks/tasksservice.cpp b/src/tasks/tasksservice.cpp
index 53947f0..6ae830f 100644
--- a/src/tasks/tasksservice.cpp
+++ b/src/tasks/tasksservice.cpp
@@ -57,128 +57,64 @@ ObjectsList parseTasksJSONFeed(const QVariantList &items);
 ObjectPtr JSONToTaskList(const QVariantMap &jsonData);
 ObjectPtr JSONToTask(const QVariantMap &jsonData);
 
-static const QUrl GoogleApisUrl(QStringLiteral("https://www.googleapis.com"));
-static const QString TasksBasePath(QStringLiteral("/tasks/v1/lists"));
-static const QString TasksListsBasePath(QStringLiteral("/tasks/v1/users/@me/lists"));
+static const QUrl GoogleApisUrl;
+static const QString TasksBasePath;
+static const QString TasksListsBasePath;
 }
 
 ObjectsList parseJSONFeed(const QByteArray &jsonFeed, FeedData &feedData)
 {
-    QJsonDocument document = QJsonDocument::fromJson(jsonFeed);
-    if (document.isNull()) {
-        return ObjectsList();
-    }
-
-    ObjectsList list;
-    const QVariantMap feed = document.toVariant().toMap();
-
-    if (feed.value(KindAttr).toString() == QLatin1String("tasks#taskLists")) {
-        list = Private::parseTaskListJSONFeed(feed.value(ItemsAttr).toList());
-
-        if (feed.contains(NextPageTokenAttr)) {
-            feedData.nextPageUrl = fetchTaskListsUrl();
-            QUrlQuery query(feedData.nextPageUrl);
-            query.addQueryItem(PageTokenParam, feed.value(NextPageTokenAttr).toString());
-            if (query.queryItemValue(MaxResultsParam).isEmpty()) {
-                query.addQueryItem(MaxResultsParam, MaxResultsParamValueDefault);
-            }
-            feedData.nextPageUrl.setQuery(query);
-        }
-
-    } else if (feed.value(KindAttr).toString() == QLatin1String("tasks#tasks")) {
-        list = Private::parseTasksJSONFeed(feed.value(ItemsAttr).toList());
-
-        if (feed.contains(NextPageTokenAttr)) {
-            QString taskListId = feedData.requestUrl.toString().remove(QStringLiteral("https://www.googleapis.com/tasks/v1/lists/"));
-            taskListId = taskListId.left(taskListId.indexOf(QLatin1Char('/')));
-
-            feedData.nextPageUrl = fetchAllTasksUrl(taskListId);
-            QUrlQuery query(feedData.nextPageUrl);
-            query.addQueryItem(PageTokenParam, feed.value(NextPageTokenAttr).toString());
-            if (query.queryItemValue(MaxResultsParam).isEmpty()) {
-                query.addQueryItem(MaxResultsParam, MaxResultsParamValueDefault);
-            }
-            feedData.nextPageUrl.setQuery(query);
-        }
-    }
-
-    return list;
+    return {};
 }
 
 QUrl fetchAllTasksUrl(const QString &tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart);
-    return url;
+    return {};
 }
 
 QUrl fetchTaskUrl(const QString &tasklistID, const QString &taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart % QLatin1Char('/') % taskID);
-    return url;
+    return {};
 }
 
 QUrl createTaskUrl(const QString &tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart);
-    return url;
+    return {};
 }
 
 QUrl updateTaskUrl(const QString &tasklistID, const QString &taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart % QLatin1Char('/') % taskID);
-    return url;
+    return {};
 }
 
 QUrl removeTaskUrl(const QString &tasklistID, const QString &taskID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart % QLatin1Char('/') % taskID);
-    return url;
+    return {};
 }
 
 QUrl moveTaskUrl(const QString &tasklistID, const QString &taskID, const QString &newParent)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksBasePath % QLatin1Char('/') % tasklistID % TasksUrlPart % QLatin1Char('/') % taskID % QLatin1String("/move"));
-    if (!newParent.isEmpty()) {
-        QUrlQuery query(url);
-        query.addQueryItem(ParentAttr, newParent);
-        url.setQuery(query);
-    }
-
-    return url;
+    return {};
 }
 
 QUrl fetchTaskListsUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath);
-    return url;
+    return {};
 }
 
 QUrl createTaskListUrl()
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath);
-    return url;
+    return {};
 }
 
 QUrl updateTaskListUrl(const QString &tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath % QLatin1Char('/') % tasklistID);
-    return url;
+    return {};
 }
 
 QUrl removeTaskListUrl(const QString &tasklistID)
 {
-    QUrl url(Private::GoogleApisUrl);
-    url.setPath(Private::TasksListsBasePath % QLatin1Char('/') % tasklistID);
-    return url;
+    return {};
 }
 
 /******************************* PRIVATE ******************************/
@@ -187,12 +123,6 @@ ObjectPtr Private::JSONToTaskList(const QVariantMap &jsonData)
 {
     TaskListPtr taskList(new TaskList());
 
-    taskList->setUid(jsonData.value(IdAttr).toString());
-    taskList->setEtag(jsonData.value(EtagAttr).toString());
-    taskList->setTitle(jsonData.value(TitleAttr).toString());
-    taskList->setSelfLink(jsonData.value(SelfLinkAttr).toString());
-    taskList->setUpdated(jsonData.value(UpdatedAttr).toString());
-
     return taskList.dynamicCast<Object>();
 }
 
