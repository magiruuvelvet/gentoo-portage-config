diff --git a/src/3rdparty/chromium/base/compiler_specific.h b/src/3rdparty/chromium/base/compiler_specific.h
index d662305dc651f..6693e9ea33e93 100644
--- a/src/3rdparty/chromium/base/compiler_specific.h
+++ b/src/3rdparty/chromium/base/compiler_specific.h
@@ -312,4 +312,31 @@ inline constexpr bool AnalyzerAssumeTrue(bool arg) {
 
 #endif  // defined(__clang_analyzer__)
 
+// Marks a type as being eligible for the "trivial" ABI despite having a
+// non-trivial destructor or copy/move constructor. Such types can be relocated
+// after construction by simply copying their memory, which makes them eligible
+// to be passed in registers. The canonical example is std::unique_ptr.
+//
+// Use with caution; this has some subtle effects on constructor/destructor
+// ordering and will be very incorrect if the type relies on its address
+// remaining constant. When used as a function argument (by value), the value
+// may be constructed in the caller's stack frame, passed in a register, and
+// then used and destructed in the callee's stack frame. A similar thing can
+// occur when values are returned.
+//
+// TRIVIAL_ABI is not needed for types which have a trivial destructor and
+// copy/move constructors, such as base::TimeTicks and other POD.
+//
+// It is also not likely to be effective on types too large to be passed in one
+// or two registers on typical target ABIs.
+//
+// See also:
+//   https://clang.llvm.org/docs/AttributeReference.html#trivial-abi
+//   https://libcxx.llvm.org/docs/DesignDocs/UniquePtrTrivialAbi.html
+#if defined(__clang__) && __has_attribute(trivial_abi)
+#define TRIVIAL_ABI [[clang::trivial_abi]]
+#else
+#define TRIVIAL_ABI
+#endif
+
 #endif  // BASE_COMPILER_SPECIFIC_H_
diff --git a/src/3rdparty/chromium/base/memory/scoped_refptr.h b/src/3rdparty/chromium/base/memory/scoped_refptr.h
index 741b3ab59bacf..0f5f07bdf4819 100644
--- a/src/3rdparty/chromium/base/memory/scoped_refptr.h
+++ b/src/3rdparty/chromium/base/memory/scoped_refptr.h
@@ -172,7 +172,7 @@ scoped_refptr<T> WrapRefCounted(T* t) {
 //   to another component (if a component merely needs to use t on the stack
 //   without keeping a ref: pass t as a raw T*).
 template <class T>
-class scoped_refptr {
+class TRIVIAL_ABI scoped_refptr {
  public:
   typedef T element_type;
 
