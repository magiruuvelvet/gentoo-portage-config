diff --git a/src/3rdparty/chromium/base/debug/stack_trace_posix.cc b/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
index 6a1531e13..90ed35bc8 100644
--- a/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
+++ b/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
@@ -488,7 +488,6 @@ void WarmUpBacktrace() {
   //             base::(anonymous namespace)::StackDumpSignalHandler
   //             at base/process_util_posix.cc:172
   // #22 <signal handler called>
-  StackTrace stack_trace;
 }
 
 #if defined(USE_SYMBOLIZE)
@@ -772,39 +771,7 @@ class SandboxSymbolizeHelper {
 }  // namespace
 
 bool EnableInProcessStackDumping() {
-#if defined(USE_SYMBOLIZE)
-  SandboxSymbolizeHelper::GetInstance();
-#endif  // USE_SYMBOLIZE
-
-  // When running in an application, our code typically expects SIGPIPE
-  // to be ignored.  Therefore, when testing that same code, it should run
-  // with SIGPIPE ignored as well.
-  struct sigaction sigpipe_action;
-  memset(&sigpipe_action, 0, sizeof(sigpipe_action));
-  sigpipe_action.sa_handler = SIG_IGN;
-  sigemptyset(&sigpipe_action.sa_mask);
-  bool success = (sigaction(SIGPIPE, &sigpipe_action, nullptr) == 0);
-
-  // Avoid hangs during backtrace initialization, see above.
-  WarmUpBacktrace();
-
-  struct sigaction action;
-  memset(&action, 0, sizeof(action));
-  action.sa_flags = SA_RESETHAND | SA_SIGINFO;
-  action.sa_sigaction = &StackDumpSignalHandler;
-  sigemptyset(&action.sa_mask);
-
-  success &= (sigaction(SIGILL, &action, nullptr) == 0);
-  success &= (sigaction(SIGABRT, &action, nullptr) == 0);
-  success &= (sigaction(SIGFPE, &action, nullptr) == 0);
-  success &= (sigaction(SIGBUS, &action, nullptr) == 0);
-  success &= (sigaction(SIGSEGV, &action, nullptr) == 0);
-// On Linux, SIGSYS is reserved by the kernel for seccomp-bpf sandboxing.
-#if !defined(OS_LINUX) && !defined(OS_CHROMEOS)
-  success &= (sigaction(SIGSYS, &action, nullptr) == 0);
-#endif  // !defined(OS_LINUX) && !defined(OS_CHROMEOS)
-
-  return success;
+  return true;
 }
 
 #if !defined(OS_NACL)
@@ -831,16 +798,7 @@ bool SetStackDumpFirstChanceCallback(bool (*handler)(int, siginfo_t*, void*)) {
 #endif
 
 size_t CollectStackTrace(void** trace, size_t count) {
-  // NOTE: This code MUST be async-signal safe (it's used by in-process
-  // stack dumping signal handler). NO malloc or stdio is allowed here.
-
-#if !defined(__UCLIBC__) && !defined(_AIX)
-  // Though the backtrace API man page does not list any possible negative
-  // return values, we take no chance.
-  return base::saturated_cast<size_t>(backtrace(trace, count));
-#else
   return 0;
-#endif
 }
 
 void StackTrace::PrintWithPrefix(const char* prefix_string) const {
diff --git a/src/3rdparty/chromium/v8/src/base/debug/stack_trace_posix.cc b/src/3rdparty/chromium/v8/src/base/debug/stack_trace_posix.cc
index ed602af54..830665b3a 100644
--- a/src/3rdparty/chromium/v8/src/base/debug/stack_trace_posix.cc
+++ b/src/3rdparty/chromium/v8/src/base/debug/stack_trace_posix.cc
@@ -320,40 +320,12 @@ void WarmUpBacktrace() {
   //             base::(anonymous namespace)::StackDumpSignalHandler
   //             at base/process_util_posix.cc:172
   // #22 <signal handler called>
-  StackTrace stack_trace;
 }
 
 }  // namespace
 
 bool EnableInProcessStackDumping() {
-  // When running in an application, our code typically expects SIGPIPE
-  // to be ignored.  Therefore, when testing that same code, it should run
-  // with SIGPIPE ignored as well.
-  struct sigaction sigpipe_action;
-  memset(&sigpipe_action, 0, sizeof(sigpipe_action));
-  sigpipe_action.sa_handler = SIG_IGN;
-  sigemptyset(&sigpipe_action.sa_mask);
-  bool success = (sigaction(SIGPIPE, &sigpipe_action, nullptr) == 0);
-
-  // Avoid hangs during backtrace initialization, see above.
-  WarmUpBacktrace();
-
-  struct sigaction action;
-  memset(&action, 0, sizeof(action));
-  action.sa_flags = SA_RESETHAND | SA_SIGINFO;
-  action.sa_sigaction = &StackDumpSignalHandler;
-  sigemptyset(&action.sa_mask);
-
-  success &= (sigaction(SIGILL, &action, nullptr) == 0);
-  success &= (sigaction(SIGABRT, &action, nullptr) == 0);
-  success &= (sigaction(SIGFPE, &action, nullptr) == 0);
-  success &= (sigaction(SIGBUS, &action, nullptr) == 0);
-  success &= (sigaction(SIGSEGV, &action, nullptr) == 0);
-  success &= (sigaction(SIGSYS, &action, nullptr) == 0);
-
-  dump_stack_in_signal_handler = true;
-
-  return success;
+  return true;
 }
 
 void DisableSignalStackDump() {
@@ -361,16 +333,7 @@ void DisableSignalStackDump() {
 }
 
 StackTrace::StackTrace() {
-  // NOTE: This code MUST be async-signal safe (it's used by in-process
-  // stack dumping signal handler). NO malloc or stdio is allowed here.
-
-#if HAVE_EXECINFO_H
-  // Though the backtrace API man page does not list any possible negative
-  // return values, we take no chance.
-  count_ = static_cast<size_t>(backtrace(trace_, arraysize(trace_)));
-#else
-  count_ = 0;
-#endif
+    count_ = 0;
 }
 
 void StackTrace::Print() const {
