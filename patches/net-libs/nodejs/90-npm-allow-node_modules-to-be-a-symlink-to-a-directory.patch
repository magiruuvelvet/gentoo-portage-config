diff --git a/deps/npm/node_modules/@npmcli/arborist/lib/arborist/reify.js b/deps/npm/node_modules/@npmcli/arborist/lib/arborist/reify.js
index 4e8b4fc1..df07cf1f 100644
--- a/deps/npm/node_modules/@npmcli/arborist/lib/arborist/reify.js
+++ b/deps/npm/node_modules/@npmcli/arborist/lib/arborist/reify.js
@@ -15,7 +15,7 @@ const { dirname, resolve, relative } = require('path')
 const { depth: dfwalk } = require('treeverse')
 const fs = require('fs')
 const { promisify } = require('util')
-const lstat = promisify(fs.lstat)
+const stat = promisify(fs.stat)
 const symlink = promisify(fs.symlink)
 const mkdirp = require('mkdirp-infer-owner')
 const justMkdirp = require('mkdirp')
@@ -504,7 +504,7 @@ module.exports = cls => class Reifier extends cls {
           continue
         }
         dirsChecked.add(d)
-        const st = await lstat(d).catch(er => null)
+        const st = await stat(d).catch(er => null)
         // this can happen if we have a link to a package with a name
         // that the filesystem treats as if it is the same thing.
         // would be nice to have conditional istanbul ignores here...
@@ -617,12 +617,13 @@ module.exports = cls => class Reifier extends cls {
       })
   }
 
-  // do not allow node_modules to be a symlink
+  // allow node_modules to be a directory or a symlink to a directory
   async [_validateNodeModules] (nm) {
     if (this[_force] || this[_nmValidated].has(nm)) {
       return
     }
-    const st = await lstat(nm).catch(() => null)
+    // PATCH: change lstat to stat to allow symbolic links to directories, continue with regular validation as usual otherwise
+    const st = await stat(nm).catch(() => null)
     if (!st || st.isDirectory()) {
       this[_nmValidated].add(nm)
       return
@@ -671,7 +672,7 @@ module.exports = cls => class Reifier extends cls {
       await this[_symlink](node)
     } else {
       await debug(async () => {
-        const st = await lstat(node.path).catch(e => null)
+        const st = await stat(node.path).catch(e => null)
         if (st && !st.isDirectory()) {
           debug.log('unpacking into a non-directory', node)
           throw Object.assign(new Error('ENOTDIR: not a directory'), {
